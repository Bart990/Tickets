# Функция сравнения и обмена значений элементов
# a - массив, i и j - индексы элементов для сравнения, dire - направление сортировки (1 для возрастания, 0 для убывания)
def compAndSwap(a, i, j, dire):
    # Если направление сортировки указывает на возрастание и элемент a[i] больше a[j], или
    # направление сортировки указывает на убывание и элемент a[i] меньше a[j], тогда меняем элементы местами.
    if (dire == 1 and a[i] > a[j]) or (dire == 0 and a[i] > a[j]):
        a[i], a[j] = a[j], a[i]


# Функция для слияния в битоническом порядке
# a - массив, low - начальный индекс, cnt - количество элементов для слияния, dire - направление сортировки
def bitonicMerge(a, low, cnt, dire):
    if cnt > 1:
        k = cnt // 2  # Находим середину последовательности
        for i in range(low, low + k):  # Проходимся по первой половине последовательности
            compAndSwap(a, i, i + k, dire)  # Сравниваем и обмениваем элементы
        bitonicMerge(a, low, k, dire)  # Рекурсивно обрабатываем первую половину
        bitonicMerge(a, low + k, k, dire)  # Рекурсивно обрабатываем вторую половину


# Функция для сортировки битонической последовательности
# a - массив, low - начальный индекс, cnt - количество элементов для сортировки, dire - направление сортировки
def bitonicSort(a, low, cnt, dire):
    if cnt > 1:
        k = cnt // 2  # Находим середину последовательности
        bitonicSort(a, low, k, 1)  # Сортируем первую половину в возрастающем порядке
        bitonicSort(a, low + k, k, 0)  # Сортируем вторую половину в убывающем порядке
        bitonicMerge(a, low, cnt, dire)  # Сливаем обе половины в битоническую последовательность


# Главная функция для сортировки массива a размером N в направлении up
def sort(a, N, up):
    bitonicSort(a, 0, N, up)  # Вызываем битоническую сортировку


# Пример использования
a = [3, 7, 4, 8, 6, 2, 1, 5]  # Исходный массив
n = len(a)  # Размер массива
up = 1  # Направление сортировки (1 для возрастания)

sort(a, n, up)  # Сортируем массив
print("Sorted array is")
for i in range(n):
    print("%d" % a[i], end=" ")  # Вывод отсортированного массива
